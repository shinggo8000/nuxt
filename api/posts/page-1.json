[{"content":"I am trying now\n\n\n\n![fire](/uploads/fire-orange-emergency-burning-1749-1-.jpg)","isEmpty":false,"excerpt":"","title":"Third Post","subtitle":"This is a third post","category":["Third Party Integrations"],"author":"Ben Ho","date":"2020-05-28T14:11:35.753Z","featureImage":"/uploads/18485258_518075661916031_4299579750564425894_n.jpg","slug":"third-post"},{"content":"Have a nice day\n\n\n\n![Tennis](/uploads/n5zsxtenuw8naejay5dmqopva-fezafwtskywx0xgmy.jpg)","isEmpty":false,"excerpt":"","title":"Second Post","subtitle":"This is a 2nd Post","category":["Third Party Integrations"],"author":"Ben Ho","date":"2020-05-27T11:46:56.578Z","featureImage":"/uploads/dan-gold-4_jhdo54byg-unsplash.jpg","slug":"second-post"},{"content":"This is my First post!\n\n\n\n![Test](/uploads/fire-orange-emergency-burning-1749-1-.jpg)","isEmpty":false,"excerpt":"","title":"First Post","subtitle":"1","category":["About Awake"],"author":"Ben Ho","date":"2020-05-27T07:38:00.558Z","featureImage":"/uploads/bonfire-burning-burnt-campfire-266604-1-.jpg","slug":"first-post"},{"content":"Awake is a Nuxt.js template for generating a beautifully robust static site with blog. \n\n# Features\n\n* Simple modern design based on the Bulma css framework (with unused css purged via [purgecss](https://www.purgecss.com/))\n* Site search\n* Statically generated API for posts and categories\n* Disqus powered comments\n* Mailchimp powered newsletter\n* Highly customizable with out of the box configurations\n* Built with performance in mind\n* Isolated Netlify CMS driver (with more CMS drivers planned for future) for easily migrating between various headless cms'\n* Images automatically resized for various screens and given srcsets\n\n# Use Awake on Netlify\n\nSimply click the \"Deploy to Netlify\" button and then configure it to fit your needs as described below.\n\n[![Deploy to Netlify!!](https://www.netlify.com/img/deploy/button.svg)](https://app.netlify.com/start/deploy?repository=https://github.com/danielkellyio/awake-template)\n\n# Configuration\n\nSite configuration is found in `/config/_siteConfig.js`. Here you can customize site settings such as the site name, layout, disqus and mailchimp setup, image sizes and more. Any of these can be setup to use environment variables if you so desire, in order to be able to configure them directly from the Netlify interface. See the setup for google analytics which already uses an environment variable as an example of this.\n\n```\ngoogleAnalytics: {\n    on: true,\n    id: process.env.GOOGLE_ANALYTICS_ID\n},\n```\n\n# Editing Content\n\nPosts and categories can be edited in Netlify CMS at \\[your-site-url]/admin. At this time any new pages must be created in the code itself and committed to the repo. Before you visit the admin for the first time, make sure you have [Netlify Identity](https://www.netlify.com/docs/identity/) setup with your user and make sure \"Git Gateway\" is enabled via the Identity Settings page in the Netlify admin. \n\n# Local Development\n\nSince all content is store in the git repo with Netlify CMS, local development is a breeze. Simply install node, pull down the repo, install the dependencies with `npm install`, and run `npm run dev`.\n\n# Having Issues?\n\nIf you're having any issues feel free to reach out to me on twitter [@danielkelly.io](https://twitter.com/danielkelly_io) or report an issue in [github repo](https://github.com/danielkellyio/awake-template).\n","isEmpty":false,"excerpt":"","title":"Getting Started","subtitle":"Get Up and Running with Awake","category":["About Awake"],"author":"Daniel Kelly","date":"2019-08-03T19:59:59.000Z","featureImage":"/uploads/getting-started-hero.jpg","slug":"getting-started-with-awake"},{"content":"The `ResourceGrid` powers the grid display of both posts and categories in the Awake template. It's a powerful, fast, and flexible component to grab a grid of any size or content when you need it.\n\n| Prop     | Description                                          | Type   | Default           |\n| -------- | ---------------------------------------------------- | ------ | ----------------- |\n| perRow   | how many resources to displayed per row              | Number | 3                 |\n| number   | total number of resources to display                 | Number | all (lazy loaded) |\n| category | for posts filters posts only in supplied category(s) | Array  | \\[]               |\n| resource | the resource to be retrieved and displayed           | String | Required          |\n\nThere are 2 simple wrappers built around the `ResourceGrid` for easily displaying a categories grid or a posts grid, easily enough they are `CategoriesGrid` and `PostsGrid`.\n\n## Examples\n```\n<--! All posts in grid with 3 per row lazy loaded until no more-->\n<posts-grid />\n\n<--! 3 posts in grid in single row -->\n<posts-grid :number=\"3\" />\n\n<--! 3 posts in grid in single row in category-1 (exactly how related posts at end of single post is accomplished) -->\n<posts-grid :number=\"3\" :category=\"['category-1']\" />\n\n<--! All categories in grid with 3 per row lazy loaded until no more-->\n<categories-grid />\n\n<--! etc -->\n```\n","isEmpty":false,"excerpt":"","title":"ResourceGrid.vue","subtitle":"Easily Display Grid of Posts/Categories Throughout the Site","category":["About Awake"],"author":"Daniel Kelly","date":"2019-08-02T04:27:56.800Z","featureImage":"/uploads/resource-grid-hero.jpg","slug":"resourcegrid-vue"},{"content":"Awake is fast for a couple different reasons. It both capitalizes on the platform it's built for (JAM Stack) and the framework it's built on (Nuxt.js) as well as includes some intentional optimizations to improve the end user experience when it comes to speed. \n\n## The JAM Stack\n\nThe JAM stack is a way of building websites that compile down basically to html, css, and javascript and then is served over a CDN. API's are then sprinkled in to add more advanced functionality where needed. Because there is no server, no computations to run, initial response time is like lightening. \n\n## Nuxt.js\n\n[Nuxt.js](https://www.nuxtjs.org) has the ability to generate static sites that are served on the JAM Stack, building plain old html files... but those html files are super-powered with Vue.js. What this means, is that pages have content \"hard coded\" into the html files for top-rate SEO scores but after initial page load behave as a traditional SPA with smooth page transitions, minimal data served between requests, etc. This means Awake is fast both on both the first page visitors hit and even faster on subsequent pages.\n\n## Purge CSS\n\nAwake uses the [Bulma](https://bulma.io/) framework for a starting place for styles but certainly doesn't use every style the Bulma framework provides. [Purge CSS](https://www.purgecss.com/) minimizes the css sent to the browser by removing any unused styles at compile time. You can read more about how Awake uses Purge CSS in this [post](/light-css-footprint).\n\n## Opti-Image + Responsive Loader\n\n[Opti-Image](https://www.npmjs.com/package/opti-image) is a little vue component I wrote to be able to serve images in the most performant way possible. It supports webp's for browser's that support it (though not using the webp functionality for Awake, yet...), lazy loading out of the box, and easy srcset management. [Responsive Loader (the Nuxt Flavor)](https://www.npmjs.com/package/nuxt-responsive-loader) auto optimizes image quality for best performance in the browser and creates multiple sizes for different devices. Combine these 2 together and all image on Awake are basically guaranteed to fly. \n\n## Font Awesome 5\n\nAwake comes with Font Awesome 5 support out of the box, so you have a wealth of free quality icons at your finger tips. However, if you're used to using Font Awesome in the more traditional manner without a build step you may be thinking: \"What about all those icons I don't actually use? Aren't they just bloat?\" Not so with Awake, with webpack we can bundle only the icons we're using. This does mean an extra step of registering a new icon when you want to use it, but that's as easy as adding it to an array in `config/modules.js` like so: \n\n```\n icons: ['faTimes', 'faSearch', 'faEnvelope', 'faUser', 'faBriefcase']\n```\n\n## Lazy Loading Like Crazy\n\nIn order to speed up both compile time and page load time, basically everything but the header, footer, hero, and main content of the posts are lazy loaded. All grids are lazy loaded with infinite scroll and all images (feature images and those in posts) are also lazy loaded. Comments can be lazy loaded or loaded on click of \"Show Comments\" button.\n\n## Pretty Stinkin' Fast, I'd Say\n\nI've taken a number of steps to try and make Awake as fast and snappy as possible for the end user and I think you'll find it's been handled fairly well. Last I ran one of the posts through Page Speed Insights I got a 99 score for desktop and 89 for mobile. [Give it a try for yourself!](https://developers.google.com/speed/pagespeed/insights/?url=https%3A%2F%2Fawake-template.netlify.com%2Fpost-markup-and-formatting%2F&tab=desktop)\n\n![Page speed insights score 99!!](/uploads/page-speed-insights.jpg)\n","isEmpty":false,"excerpt":"","title":"Built For Speed","subtitle":"Awake is Built to Be Blazing Fast","category":["About Awake"],"author":"Daniel Kelly","date":"2019-08-02T04:27:56.800Z","featureImage":"/uploads/marc-olivier-jodoin-nqoinj-ttqm-unsplash.jpg","slug":"built-for-speed"}]